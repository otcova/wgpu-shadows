use indoc::formatdoc;

use super::atlas::Atlas;
use super::font_parser::*;
use std::fs;

pub fn main(atlas: &Atlas) {
    let font = Font::parse(
        include_str!("../fonts/Tektur-Regular.fnt"),
        *atlas.images.get("tektur_regular").unwrap(),
    );
    generate_code(font);
}

fn generate_code(font: Font) {
    let Font {
        tex_size,
        line_height,
        glyphs,
        glyphs_start,
    } = font;

    let mut glyphs_src = String::with_capacity(glyphs.len() * 8);

    for glyph in glyphs {
        let indent = "        ";

        if let Some(Glyph {
            tex_pos,
            tex_size,
            pos,
            size,
            advance,
        }) = glyph
        {
            glyphs_src += &formatdoc! {"
                {indent}Some(Glyph {{
                {indent}    tex_pos: {tex_pos},
                {indent}    tex_size: {tex_size},
                {indent}    pos: {pos},
                {indent}    size: {size},
                {indent}    advance: {advance}f32,
                {indent}}}),
            "};
        } else {
            glyphs_src += indent;
            glyphs_src += "None,\n";
        }
    }

    let fonts_src = formatdoc! {"
        // THIS CODE IS GENERATED BY THE BUILD SCRIPT.
        // ANY CHANGE WILL BE OVERWRITTEN.

        use super::*;
    
        pub const FONT: Font = Font {{
            tex_size: {tex_size},
            line_height: {line_height}f32,
            glyphs: &[\n{glyphs_src}
            ],
            glyphs_start: {glyphs_start},
        }};
    "};

    fs::write("src/font/loaded_fonts.rs", fonts_src).unwrap();
}
